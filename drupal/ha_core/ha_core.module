<?php

/**
 * Implements hook_entity_info().
 */
function ha_core_entity_info() {
  $info = array();

  $info['ha_core_note'] = array(
    'label' => t('Note'),
    'entity class' => 'Entity',
    'controller class' => 'HACoreNoteController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'ha_core_note',
    'load hook' => 'ha_core_note_load',
    'uri callback' => 'ha_core_note_uri',
    'access callback' => 'ha_core_note_access',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
    ),
    'bundles' => array(
      'ha_core_note' => array(
        'label' => 'Note',
        'admin' => array(
          'path' => 'admin/structure/ha_core_note/manage',
          'access arguments' => array('administer ha_core_notes'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full Note'),
        'custom settings' => FALSE,
      ),
    ),
  );
  $info['ha_core_note']['inline entity form'] = array(
    'controller' => 'HACoreNoteInlineEntityFormController',
  );

  return $info;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function ha_core_entity_property_info_alter(&$info) {
  $properties = &$info['ha_core_note']['properties'];
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the note."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer ha_core_notes',
    'required' => TRUE,
    'schema field' => 'uid',
  );
}

/**
 * Implements hook_permission().
 */
function ha_core_permission(){
  return array(
    'administer ha_core_notes' =>  array(
      'title' => t('Administer Notes'),
    ),
    'view ha_core_notes' => array(
      'title' => t('View Notes'),
    ),
    'create ha_core_notes' => array(
      'title' => t('Create Notes'),
    ),
    'edit any ha_core_notes' => array(
      'title' => t('Edit Any Notes'),
    ),
    'edit own ha_core_notes' => array(
      'title' => t('Edit Own Notes'),
    ),
  );
}
 
/**
 * Implements hook_field_extra_fields().
 */
function ha_core_field_extra_fields() {
  $return['ha_core_note']['ha_core_note'] = array(
    'form' => array(
      'uid' => array(
        'label' => t('Author'),
        'description' => t('Note author'),
        'weight' => -10,
      ),
      'body' => array(
        'label' => t('Body'),
        'description' => t('Note Body'),
        'weight' => -9,
      ),
      'date' => array(
        'label' => t('Date'),
        'description' => t('Note last modified date'),
        'weight' => -8,
      ),
    ),
  );
 
  return $return;
}

/*  
 * Implementation of hook_menu()  
 */  
function ha_core_menu() {  
  // desired path location
  $items['admin/config/system/ha_settings'] = array(  
    // page title  
    'title' => 'Homepage Settings',  
    // describe the page for the menu system.  site visitors will not see this  
    'description' => 'Staff configurable page with custom settings form.',  
    // function that is called when visiting the new path to generate the page's content  
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ha_core_settings_form'),
    // permissions required to view page  
    'access arguments' => array('administer site configuration'),  
  );
  $items['admin/structure/ha_core_note/manage'] = array(
    'title' => 'Note Admin',
    'description' => 'Manage Note structure',
    'page callback' => 'ha_core_note_info',
    'access arguments' => array('administer ha_core_notes'),
  );
  $items['ha_core_note/%ha_core_note'] = array(
    'page callback' => 'ha_core_note_page_view',
    'page arguments' => array(1),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'ha_core_note', 1),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/ha_core_note/manage/add'] = array(
    'title' => 'Add Note',
    'page callback' => 'ha_core_note_add',
    'access arguments' => array('create ha_core_notes'),
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;  
}  

/**
* Page callback: Custom settings form
*/
function ha_core_settings_form($form, &$form_state) {

  $form['ha_home_h2'] = array(
    '#type' => 'textfield',
    '#title' => t("Homepage Welcome Title"),
    '#default_value' => variable_get('ha_home_h2', 'Welcome to HA Lighting'),
    '#size' => 50,
    '#maxlength' => 200,
    '#description' => t('The title displayed on the homepage'),
    '#required' => TRUE,
  );
  $form['ha_home_message'] = array(
    '#type' => 'textarea',
    '#title' => t("Homepage Block 1 Content"),
    '#default_value' => variable_get('ha_home_message', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce ut metus efficitur, gravida felis et, pretium nisi. Mauris varius sit amet sapien pellentesque luctus. Donec suscipit massa eget nisi placerat, at placerat enim venenatis. Vestibulum euismod semper pulvinar. Vivamus rhoncus, est vel lobortis elementum, sapien arcu tincidunt leo, eget dignissim lacus lacus at risus. Nunc eget auctor ante, vel gravida nunc. Etiam congue tellus turpis, id scelerisque augue pharetra a.'),
    '#size' => 50,
    '#maxlength' => 1500,
    '#description' => t('The main content section on the homepage'),
    '#required' => TRUE,
  );

  $form['ha_block_1_title'] = array(
    '#type' => 'textfield',
    '#title' => t("Homepage Block 1 Title"),
    '#default_value' => variable_get('ha_block_1_title', ''),
    '#size' => 50,
    '#maxlength' => 200,
    '#description' => t('The title of the first block on the homepage'),
    '#required' => TRUE,
  );
  $form['ha_block_1_image'] = array(
   '#type' => 'managed_file',
   '#name' => 'Services Image',
   '#title' => t('Services Image'),
   '#default_value' => variable_get('ha_block_1_image', ''),
   '#description' => t("Upload Image for Services Block"),
   '#required' => TRUE,
   '#upload_location' => 'public://'
   );
  $form['ha_block_1_content'] = array(
    '#type' => 'textarea',
    '#title' => t("Homepage Block 1 Content"),
    '#default_value' => variable_get('ha_block_1_content', ''),
    '#size' => 50,
    '#maxlength' => 1500,
    '#description' => t('The content of the first block on the homepage'),
    '#required' => TRUE,
  );
  $form['ha_block_2_title'] = array(
    '#type' => 'textfield',
    '#title' => t("Homepage Block 2 Title"),
    '#default_value' => variable_get('ha_block_2_title', ''),
    '#size' => 50,
    '#maxlength' => 200,
    '#description' => t('The title of the second block on the homepage'),
    '#required' => TRUE,
  );
  $form['ha_block_2_image'] = array(
   '#type' => 'managed_file',
   '#name' => 'Projets Image',
   '#title' => t('Projects Image'),
   '#default_value' => variable_get('ha_block_2_image', ''),
   '#description' => t("Upload Image for Projects Block"),
   '#required' => TRUE,
   '#upload_location' => 'public://'
   );
  $form['ha_block_2_content'] = array(
    '#type' => 'textarea',
    '#title' => t("Homepage Block 2 Content"),
    '#default_value' => variable_get('ha_block_2_content', ''),
    '#size' => 50,
    '#maxlength' => 1500,
    '#description' => t('The content of the second block on the homepage'),
    '#required' => TRUE,
  );
  $form['ha_block_3_title'] = array(
    '#type' => 'textfield',
    '#title' => t("Homepage Block 3 Title"),
    '#default_value' => variable_get('ha_block_3_title', ''),
    '#size' => 50,
    '#maxlength' => 200,
    '#description' => t('The title of the third block on the homepage'),
    '#required' => TRUE,
  );
  $form['ha_block_3_image'] = array(
   '#type' => 'managed_file',
   '#name' => 'Surveys Image',
   '#title' => t('Surveys Image'),
   '#default_value' => variable_get('ha_block_3_image', ''),
   '#description' => t("Upload Image for Surveys Block"),
   '#required' => TRUE,
   '#upload_location' => 'public://'
   );
  $form['ha_block_3_content'] = array(
    '#type' => 'textarea',
    '#title' => t("Homepage Block 3 Content"),
    '#default_value' => variable_get('ha_block_3_content', ''),
    '#size' => 50,
    '#maxlength' => 1500,
    '#description' => t('The content of the third block on the homepage'),
    '#required' => TRUE,
  );
  return system_settings_form($form); 
  }

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 */

function ha_core_block_info() {
  $blocks = array();
  $blocks['services_homepage_block'] = array(
    'info' => t('Services Block'),
    'status' => 1,
    'region' => 'above_footer',
  );
 
 $blocks['projects_homepage_block'] = array(
   'info' => t('Projects Block'),
   'status' => 1,
   'region' => 'above_footer',
 );

 $blocks['surveys_homepage_block'] = array(
   'info' => t('Surveys Block'),
   'status' => 1,
   'region' => 'above_footer',
 );
 return $blocks;
}

function ha_core_block_view($delta = '') {
  $block = array();

  $file_id_1 = variable_get('ha_block_1_image', 0);
  if (empty($file_id_1)) {
    // User has not added images yet. Don't display blocks.
    return array();
  }
  $file_object = file_load($file_id_1);
  $file_url_1 = file_create_url($file_object->uri);

  $file_id_2 = variable_get('ha_block_2_image', 0);
  $file_object = file_load($file_id_2);
  $file_url_2 = file_create_url($file_object->uri);

  $file_id_3 = variable_get('ha_block_3_image', 0);
  $file_object = file_load($file_id_3);
  $file_url_3 = file_create_url($file_object->uri);

  switch ($delta) {
    case 'services_homepage_block':
      $output =  '<img width="305" height="180" align="center" src="'. $file_url_1 . '"/>' . '<p>' . variable_get('ha_block_1_content', '') . '</p>';
      $block = array(
        'subject' => variable_get('ha_block_1_title', ''),
        'content' => $output,
      );
      break;

    case 'projects_homepage_block':
      $output =  '<img width="305" height="180" align="center" src="'. $file_url_2 . '"/>' . '<p>' . variable_get('ha_block_2_content', '') . '</p>';
      $block = array(
        'subject' => variable_get('ha_block_2_title', ''),
        'content' => $output,
      );
      break;

    case 'surveys_homepage_block':
      $output =  '<img width="305" height="180" align="center" src="'. $file_url_3 . '"/>' . '<p>' . variable_get('ha_block_3_content', '') . '</p>';
      $block = array(
        'subject' => variable_get('ha_block_3_title', ''),
        'content' => $output,
      );
      break;
  }
  if (drupal_is_front_page()) {
    return $block;
  } 
  else {
    return array();
  }
}

function ha_core_inline_entity_form_table_fields_alter(&$fields, $context) {
  // Ensure only the desired bundle is being altered 
  foreach ($context['allowed_bundles'] as $bundle) {
    if ($bundle == 'ha_core_note') {
      unset($fields['id']);
      unset($fields['uid']);

      $fields['body'] = array(
        'type' => 'property',
        'label' => t('Body'),
        'weight' => 1,
      );
    }
  }
}

/**
 * Implementation of hook_form_alter()
 */
function ha_core_form_alter(&$form, $form_state, $form_id) {
  // If it is a node form, add an after build call 
  if (strpos($form_id, '_node_form') !== FALSE) {
    $form['#after_build'][] = 'ha_core_after_build';
  }

  // If it is a view with proximity filter including country, update country list
  elseif ($form_id == 'views_exposed_form' && isset($form['distance']['country']['#options'])) {
    $form['distance']['country']['#options'] = _countries_serviced();
  }
}

/**
 * Make changes to country field after all fields are rendered
 */
function ha_core_after_build($form_element, &$form_state) {
  // If there is a Location field, update the country list
  if (isset($form_element['locations']['0']['country']['#options'])) {
    $form_element['locations']['0']['country']['#options'] = _countries_serviced();
  }

  return $form_element;
}

/**
 * Returns array of countries serviced by HA Lighting formatted for Location module
 */
function _countries_serviced() {
  return array(
    'pr' => 'Puerto Rico',
    'us' => 'United States',
  );
}

/*** Note Functions ***********************************************************/

/**
 * Return the URI for the given Note entity.
 *
 * @see callback_entity_info_uri()
 */
function ha_core_note_uri($note) {
  return array(
    'path' => 'ha_core_note/' . $note->id,
  );
}

/**
 * Access callback for Note entity. Return TRUE if the user has Note entity
 * access rights, and FALSE if not.
 *
 * @see hook_entity_info()
 */
function ha_core_note_access($op, $note = NULL, $account = NULL, $entity_type) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  // If user can administer, it has full access.
  if (user_access('administer ha_core_notes', $account)) {
    return TRUE;
  }

  $mgmt_roles = array('administrator', 'leader', 'developer', 'technician supervisor', 'office assistant');

  switch ($op) {
    case 'create':
      return user_access('create ha_core_notes', $account);

    case 'view':
      // Allow user to view if it is not a management only note, or if the user is a manager.
      $can_access_note = user_access('view ha_core_notes', $account);
      $is_public_note = empty($note->field_only_visible_to_mgmt['und']['0']['value']);
      $is_manager = !empty(array_intersect($mgmt_roles, $account->roles));
      return $can_access_note && ($is_public_note || $is_manager);

    case 'update':
      $can_access_note = user_access('edit any ha_core_notes');
      $can_edit_own_note = user_access('edit own ha_core_notes');
      $user_created_note = $note->uid == $account->uid;
      return $can_access_note || ($can_edit_own_note && $user_created_note);

    case 'delete':
      return user_access('edit any ha_core_notes');

    default:
      return FALSE;
  }
}

/**
 * Write Note entity to database.
 */
function ha_core_note_save(&$note) {
  return entity_save('ha_core_note', $note);
}

/**
 * Load a single Note entity.
 */
function ha_core_note_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $note = ha_core_note_load_multiple($ids, array(), $reset);
  return $note ? reset($note) : FALSE;
}

/**
 * Load multiple Note entities.
 */
function ha_core_note_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ha_core_note', $ids, $conditions, $reset);
}

/**
 * Page callback for managing Note entity structure.
 */
function ha_core_note_info() {
  return 'Administration page for Notes.';
}

/**
 * Page callback for viewing a Note entity.
 */
function ha_core_note_page_view($note) {
  drupal_set_title('Note ' . $note->id);
  return entity_view('ha_core_note', array($note));
}

/**
 * Page callback for adding a Note entity.
 */
function ha_core_note_add() {
  $values = array();

  $values['uid'] = '';
  $values['body'] = '';
  $values['date'] = '';

  $note = entity_create('ha_core_note', $values);
  drupal_set_title(t('Create Note'));

  return drupal_get_form('ha_core_note_add_form', $note);
}

/**
 * Form for adding a Note entity.
 */
function ha_core_note_add_form($form, &$form_state, $note) {
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $note->uid,
  );

  field_attach_form('ha_core_note', $note, $form, $form_state);

  return $form;
}

/**
 * Validation handler for the Note entity add form.
 */
function ha_core_note_add_form_validate($form, &$form_state) {
  $note_submission = (object) $form_state['values'];
  field_attach_form_validate('ha_core_note', $note_submission, $form, $form_state);
}

/**
 * Submit handler for the Note entity add form.
 */
function ha_core_note_add_form_submit($form, &$form_state) {
  $note_submission = (object) $form_state['values'];
  field_attach_submit('ha_core_note', $note_submission, $form, $form_state);
  $id = ha_core_note_save($note_submission);
  $form_state['redirect'] = "ha_core_note/$id";
}
